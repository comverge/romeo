!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/85a8b1b/
Add jid to roster	README.md	/^# Add jid to roster$/;"	c
Auth	lib/romeo/auth.ex	/^defmodule Romeo.Auth do$/;"	m
Changelog	CHANGELOG.md	/^# Changelog$/;"	c
Chars	lib/romeo/jid.ex	/^  defimpl String.Chars, for: JID do$/;"	i
Config	lib/mix/tasks/ejabberd.gen.config.ex	/^defmodule Mix.Tasks.Ejabberd.Gen.Config do$/;"	m
Connection	lib/romeo/connection.ex	/^defmodule Romeo.Connection do$/;"	m
ConnectionTest	test/romeo/connection_test.exs	/^defmodule Romeo.ConnectionTest do$/;"	m
Documentation	README.md	/^## Documentation$/;"	s
Error	lib/romeo/auth.ex	/^  defmodule Error do$/;"	m
Error	lib/romeo/error.ex	/^defmodule Romeo.Error do$/;"	m
Features	lib/romeo/connection/features.ex	/^defmodule Romeo.Connection.Features do$/;"	m
Get roster items as tuple of %Romeo.Roster.Items{} struct	README.md	/^# Get roster items as tuple of %Romeo.Roster.Items{} struct$/;"	c
IQ	lib/romeo/stanza/iq.ex	/^defmodule Romeo.Stanza.IQ do$/;"	m
Installation	README.md	/^## Installation$/;"	s
Item	lib/romeo/roster/item.ex	/^defmodule Romeo.Roster.Item do$/;"	m
JID	lib/romeo/jid.ex	/^defmodule Romeo.JID do$/;"	m
JidTest	test/romeo/jid_test.exs	/^defmodule Romeo.JidTest do$/;"	m
Join a chat room	README.md	/^# Join a chat room$/;"	c
License	README.md	/^## License$/;"	s
Mechanism	lib/romeo/auth.ex	/^  defmodule Mechanism do$/;"	m
Message	lib/romeo/stanza/message.ex	/^defmodule Romeo.Stanza.Message do$/;"	m
Minimum configuration options	README.md	/^# Minimum configuration options$/;"	c
Mixfile	mix.exs	/^defmodule Romeo.Mixfile do$/;"	m
Naming	README.md	/^## Naming$/;"	s
Parser	lib/romeo/stanza/parser.ex	/^defmodule Romeo.Stanza.Parser do$/;"	m
ParserTest	test/romeo/stanza/parser_test.exs	/^defmodule Romeo.Stanza.ParserTest do$/;"	m
Presence	lib/romeo/stanza/presence.ex	/^defmodule Romeo.Stanza.Presence do$/;"	m
Remove jid from roster	README.md	/^# Remove jid from roster$/;"	c
Request your roster	README.md	/^# Request your roster$/;"	c
Romeo	README.md	/^# Romeo$/;"	c
Romeo	lib/romeo.ex	/^defmodule Romeo do$/;"	m
RomeoTest	test/romeo_test.exs	/^defmodule RomeoTest do$/;"	m
Roster	lib/romeo/roster.ex	/^defmodule Romeo.Roster do$/;"	m
RosterTest	test/romeo/roster_test.exs	/^defmodule Romeo.RosterTest do$/;"	m
Send a message to the room	README.md	/^# Send a message to the room$/;"	c
Send presence to the server	README.md	/^# Send presence to the server$/;"	c
Stanza	lib/romeo/stanza.ex	/^defmodule Romeo.Stanza do$/;"	m
StanzaTest	test/romeo/stanza_test.exs	/^defmodule Romeo.StanzaTest do$/;"	m
Start the client	README.md	/^# Start the client$/;"	c
TCP	lib/romeo/transports/tcp.ex	/^defmodule Romeo.Transports.TCP do$/;"	m
Usage	README.md	/^## Usage$/;"	s
UserHelper	test/user_helper.exs	/^defmodule UserHelper do$/;"	m
XML	lib/romeo/xml.ex	/^defmodule Romeo.XML do$/;"	m
XMLNS	lib/romeo/xmlns.ex	/^defmodule Romeo.XMLNS do$/;"	m
XMLNSTest	test/romeo/xmlns_test.exs	/^defmodule Romeo.XMLNSTest do$/;"	m
XMLTest	test/romeo/xml_test.exs	/^defmodule Romeo.XMLTest do$/;"	m
__using__	lib/romeo/xml.ex	/^  defmacro __using__(_opts) do$/;"	a
__using__	lib/romeo/xmlns.ex	/^  defmacro __using__([]) do$/;"	a
__using__	test/user_helper.exs	/^  defmacro __using__(_) do$/;"	a
acceptable_mechanism?	lib/romeo/auth.ex	/^  defp acceptable_mechanism?(mechanism, mechanisms),$/;"	f
acceptable_mechanism?	lib/romeo/auth.ex	/^  defp acceptable_mechanism?({name, _mod}, mechanisms),$/;"	f
activate	lib/romeo/transports/tcp.ex	/^  defp activate({:gen_tcp, socket}) do$/;"	f
activate	lib/romeo/transports/tcp.ex	/^  defp activate({:ssl, socket}) do$/;"	f
add	lib/romeo/roster.ex	/^  def add(pid, jid) do$/;"	f
add	lib/romeo/roster.ex	/^  def add(pid, jid, name) do$/;"	f
application	mix.exs	/^  def application do$/;"	f
attr	lib/romeo/xml.ex	/^  def attr(element, name, default \\\\ nil) do$/;"	f
attr	test/romeo/xml_test.exs	/^  test "attr" do$/;"	t
auth	lib/romeo/stanza.ex	/^  def auth(mechanism), do: auth(mechanism, [], [])$/;"	f
auth	lib/romeo/stanza.ex	/^  def auth(mechanism, [], []) do$/;"	f
auth	lib/romeo/stanza.ex	/^  def auth(mechanism, body) do$/;"	f
auth	lib/romeo/stanza.ex	/^  def auth(mechanism, body, []) do$/;"	f
auth	lib/romeo/stanza.ex	/^  def auth(mechanism, body, additional_attrs) do$/;"	f
auth	test/romeo/stanza_test.exs	/^  test "auth" do$/;"	t
auth anonymous	test/romeo/stanza_test.exs	/^  test "auth anonymous" do$/;"	t
authenticate	lib/romeo/transports/tcp.ex	/^  defp authenticate(%Conn{} = conn) do$/;"	f
authenticate!	lib/romeo/auth.ex	/^  def authenticate!(conn) do$/;"	f
authenticate_with	lib/romeo/auth.ex	/^  defp authenticate_with("ANONYMOUS", %{transport: mod} = conn) do$/;"	f
authenticate_with	lib/romeo/auth.ex	/^  defp authenticate_with("PLAIN", %{transport: mod} = conn) do$/;"	f
authenticate_with	lib/romeo/auth.ex	/^  defp authenticate_with(mechanism_name, _conn) do$/;"	f
bare	lib/romeo/jid.ex	/^  def bare(%JID{} = jid), do: to_string(%JID{jid | resource: ""})$/;"	f
bare	lib/romeo/jid.ex	/^  def bare(jid) when is_binary(jid), do: parse(jid) |> bare$/;"	f
bare returns a JID without a resource	test/romeo/jid_test.exs	/^  test "bare returns a JID without a resource" do$/;"	t
base64_cdata	lib/romeo/stanza.ex	/^  def base64_cdata(payload) do$/;"	f
bind	lib/romeo/stanza.ex	/^  def bind(resource) do$/;"	f
bind	lib/romeo/transports/tcp.ex	/^  defp bind(%Conn{owner: owner, resource: resource} = conn) do$/;"	f
bind	test/romeo/stanza_test.exs	/^  test "bind" do$/;"	t
body	lib/romeo/stanza.ex	/^  def body(data) do$/;"	f
build_user	test/user_helper.exs	/^  def build_user(username, opts \\\\ []) do$/;"	f
cdata	lib/romeo/stanza.ex	/^  def cdata(payload) do$/;"	f
cdata	lib/romeo/xml.ex	/^  def cdata(element), do: :fxml.get_tag_cdata(element)$/;"	f
cdata	lib/romeo/xml.ex	/^  def cdata(nil), do: ""$/;"	f
cdata	test/romeo/xml_test.exs	/^  test "cdata" do$/;"	t
chat	lib/romeo/stanza.ex	/^  def chat(to, body), do: message(to, "chat", body)$/;"	f
close	lib/romeo/connection.ex	/^  def close(pid, opts \\\\ []) do$/;"	f
close connection	test/romeo/connection_test.exs	/^  test "close connection", %{romeo: romeo} do$/;"	t
compress	lib/romeo/stanza.ex	/^  def compress(method) do$/;"	f
compress	test/romeo/stanza_test.exs	/^  test "compress" do$/;"	t
connect	lib/romeo/connection.ex	/^  def connect(_, %{transport: transport, timeout: timeout} = conn) do$/;"	f
connect	lib/romeo/transports/tcp.ex	/^  def connect(%Conn{host: host, port: port, socket_opts: socket_opts, legacy_tls: tls} = conn) d/;"	f
connection TLS	test/romeo/connection_test.exs	/^  test "connection TLS", %{romeo: romeo} do$/;"	t
connection no TLS	test/romeo/connection_test.exs	/^  test "connection no TLS" do$/;"	t
delayed?	lib/romeo/stanza/parser.ex	/^  defp delayed?(xmlel(children: children)) do$/;"	f
deps	mix.exs	/^  defp deps do$/;"	f
description	mix.exs	/^  defp description do$/;"	f
disco_info	lib/romeo/stanza.ex	/^  def disco_info(to) do$/;"	f
disco_info	test/romeo/stanza_test.exs	/^  test "disco_info" do$/;"	t
disco_items	lib/romeo/stanza.ex	/^  def disco_items(to) do$/;"	f
disco_items	test/romeo/stanza_test.exs	/^  test "disco_items" do$/;"	t
disconnect	lib/romeo/connection.ex	/^  def disconnect(info, %{owner: owner, socket: socket, transport: transport} = conn) do$/;"	f
disconnect	lib/romeo/transports/tcp.ex	/^  def disconnect(info, {mod, socket}) do$/;"	f
do_authenticate	lib/romeo/auth.ex	/^  defp do_authenticate(mechanism, conn) do$/;"	f
docs	mix.exs	/^  defp docs do$/;"	f
docs_extras	mix.exs	/^  defp docs_extras do$/;"	f
empty cdata	test/romeo/xml_test.exs	/^  test "empty cdata" do$/;"	t
encode!	lib/romeo/xml.ex	/^  def encode!(stanza), do:$/;"	f
encode!	lib/romeo/xml.ex	/^  def encode!({:xmlel, _, _, _} = xml), do:$/;"	f
encode!	lib/romeo/xml.ex	/^  def encode!({:xmlstreamend, name}), do:$/;"	f
encode!	lib/romeo/xml.ex	/^  def encode!({:xmlstreamstart, name, attrs}), do:$/;"	f
encode!	test/romeo/xml_test.exs	/^  test "encode!" do$/;"	t
end_stream	lib/romeo/stanza.ex	/^  def end_stream, do: xmlstreamend(name: "stream:stream")$/;"	f
end_stream	test/romeo/stanza_test.exs	/^  test "end_stream" do$/;"	t
exception	lib/romeo/auth.ex	/^    def exception(mechanism) do$/;"	f
exception	lib/romeo/error.ex	/^  def exception(message) do$/;"	f
exchanging messages with others	test/romeo/connection_test.exs	/^  test "exchanging messages with others", %{romeo: romeo, juliet: juliet} do$/;"	t
generate_body	lib/romeo/stanza.ex	/^  def generate_body(data) do$/;"	f
get_body	lib/romeo/stanza/parser.ex	/^  defp get_body(stanza), do: subelement(stanza, "body") |> cdata$/;"	f
get_client_credentials	lib/romeo/auth.ex	/^  defp get_client_credentials(%{jid: jid, password: password}) do$/;"	f
get_group	lib/romeo/stanza/parser.ex	/^  defp get_group(stanza), do: subelement(stanza, "group") |> cdata$/;"	f
get_html	lib/romeo/stanza/parser.ex	/^  defp get_html(stanza), do: subelement(stanza, "html")$/;"	f
get_inband_register	lib/romeo/stanza.ex	/^  def get_inband_register do$/;"	f
get_inband_register	test/romeo/stanza_test.exs	/^  test "get_inband_register" do$/;"	t
get_roster	lib/romeo/stanza.ex	/^  def get_roster do$/;"	f
get_roster	test/romeo/stanza_test.exs	/^  test "get_roster" do$/;"	t
get_show	lib/romeo/stanza/parser.ex	/^  defp get_show(stanza), do: subelement(stanza, "show") |> cdata$/;"	f
get_status	lib/romeo/stanza/parser.ex	/^  defp get_status(stanza), do: subelement(stanza, "status") |> cdata$/;"	f
get_vcard	lib/romeo/stanza.ex	/^  def get_vcard(to) do$/;"	f
get_vcard	test/romeo/stanza_test.exs	/^  test "get_vcard" do$/;"	t
getting	test/romeo/roster_test.exs	/^  test "getting, adding, removing roster items", %{benvolio: benvolio, mercutio: mercutio, pid: /;"	t
group chat	test/romeo/stanza_test.exs	/^  test "group chat" do$/;"	t
groupchat	lib/romeo/stanza.ex	/^  def groupchat(to, body), do: message(to, "groupchat", body)$/;"	f
handle_call	lib/romeo/connection.ex	/^  def handle_call(:close, from, %{socket: socket, transport: transport} = conn) do$/;"	f
handle_call	lib/romeo/connection.ex	/^  def handle_call(_, _, %{socket: nil} = conn) do$/;"	f
handle_call	lib/romeo/connection.ex	/^  def handle_call({:send, data}, _, %{transport: transport} = conn) do$/;"	f
handle_data	lib/romeo/transports/tcp.ex	/^  defp handle_data(data, %{socket: socket} = conn) do$/;"	f
handle_info	lib/romeo/connection.ex	/^  def handle_info(info, %{owner: owner, transport: transport} = conn) do$/;"	f
handle_message	lib/romeo/transports/tcp.ex	/^  def handle_message(_, _), do: :unknown$/;"	f
handle_message	lib/romeo/transports/tcp.ex	/^  def handle_message({:ssl, socket, data}, %{socket: {:ssl, socket}} = conn) do$/;"	f
handle_message	lib/romeo/transports/tcp.ex	/^  def handle_message({:ssl_closed, socket}, %{socket: {:ssl, socket}}) do$/;"	f
handle_message	lib/romeo/transports/tcp.ex	/^  def handle_message({:ssl_error, socket, reason}, %{socket: {:ssl, socket}}) do$/;"	f
handle_message	lib/romeo/transports/tcp.ex	/^  def handle_message({:tcp, socket, data}, %{socket: {:gen_tcp, socket}} = conn) do$/;"	f
handle_message	lib/romeo/transports/tcp.ex	/^  def handle_message({:tcp_closed, socket}, %{socket: {:gen_tcp, socket}}) do$/;"	f
handle_message	lib/romeo/transports/tcp.ex	/^  def handle_message({:tcp_error, socket, reason}, %{socket: {:gen_tcp, socket}}) do$/;"	f
handle_message	lib/romeo/transports/tcp.ex	/^  def handle_message({:xmlstreamelement, stanza}, conn) do$/;"	f
handshake	lib/romeo/stanza.ex	/^  def handshake(hash) do$/;"	f
handshake	lib/romeo/transports/tcp.ex	/^  defp handshake(%Conn{} = conn) do$/;"	f
handshake!	lib/romeo/auth.ex	/^  def handshake!(%{transport: mod, password: password, stream_id: stream_id} = conn) do$/;"	f
history	lib/romeo/stanza.ex	/^  defp history([{key, value}]) do$/;"	f
host	lib/romeo/transports/tcp.ex	/^  defp host(jid) do$/;"	f
id	lib/romeo/stanza.ex	/^  def id do$/;"	f
init	lib/romeo/connection.ex	/^  def init(conn) do$/;"	f
iq	lib/romeo/stanza.ex	/^  def iq(to, type, body) do$/;"	f
iq	lib/romeo/stanza.ex	/^  def iq(type, body) do$/;"	f
it converts binaries into structs	test/romeo/jid_test.exs	/^  test "it converts binaries into structs" do$/;"	t
it parses stanzas	test/romeo/stanza/parser_test.exs	/^  test "it parses stanzas" do$/;"	t
it provides XML namespaces	test/romeo/xmlns_test.exs	/^  test "it provides XML namespaces" do$/;"	t
items	lib/romeo/roster.ex	/^  def items(pid) do$/;"	f
join	lib/romeo/stanza.ex	/^  def join(room, nickname, opts \\\\ []) do$/;"	f
maybe_start_tls	lib/romeo/transports/tcp.ex	/^  defp maybe_start_tls(%Conn{features: %Features{tls?: true}} = conn) do$/;"	f
maybe_start_tls	lib/romeo/transports/tcp.ex	/^  defp maybe_start_tls(%Conn{} = conn), do: conn$/;"	f
message	lib/romeo/stanza.ex	/^  def message(msg) when is_map(msg) do$/;"	f
message	lib/romeo/stanza.ex	/^  def message(to, type, message) do$/;"	f
message	test/romeo/stanza_test.exs	/^  test "message" do$/;"	t
message map	test/romeo/stanza_test.exs	/^  test "message map" do$/;"	t
muc_password	lib/romeo/stanza.ex	/^  defp muc_password(password) do$/;"	f
negotiate_features	lib/romeo/transports/tcp.ex	/^  defp negotiate_features(%Conn{} = conn) do$/;"	f
normal	lib/romeo/stanza.ex	/^  def normal(to, body), do: message(to, "normal", body)$/;"	f
normal chat	test/romeo/stanza_test.exs	/^  test "normal chat" do$/;"	t
ns_abuse_reporting	lib/romeo/xmlns.ex	/^  def ns_abuse_reporting,$/;"	f
ns_address	lib/romeo/xmlns.ex	/^  def ns_address,$/;"	f
ns_adhoc	lib/romeo/xmlns.ex	/^  def ns_adhoc,$/;"	f
ns_admin	lib/romeo/xmlns.ex	/^  def ns_admin,$/;"	f
ns_amp	lib/romeo/xmlns.ex	/^  def ns_amp,$/;"	f
ns_amp_errors	lib/romeo/xmlns.ex	/^  def ns_amp_errors,$/;"	f
ns_amp_feat	lib/romeo/xmlns.ex	/^  def ns_amp_feat,$/;"	f
ns_archiving	lib/romeo/xmlns.ex	/^  def ns_archiving,$/;"	f
ns_attention	lib/romeo/xmlns.ex	/^  def ns_attention,$/;"	f
ns_attention_0	lib/romeo/xmlns.ex	/^  def ns_attention_0,$/;"	f
ns_attest_1	lib/romeo/xmlns.ex	/^  def ns_attest_1,$/;"	f
ns_auth_token	lib/romeo/xmlns.ex	/^  def ns_auth_token,$/;"	f
ns_bind	lib/romeo/xmlns.ex	/^  def ns_bind,$/;"	f
ns_blocking	lib/romeo/xmlns.ex	/^  def ns_blocking,$/;"	f
ns_blocking_errors	lib/romeo/xmlns.ex	/^  def ns_blocking_errors,$/;"	f
ns_bob	lib/romeo/xmlns.ex	/^  def ns_bob,$/;"	f
ns_bookmarks	lib/romeo/xmlns.ex	/^  def ns_bookmarks,$/;"	f
ns_bosh	lib/romeo/xmlns.ex	/^  def ns_bosh,$/;"	f
ns_browse	lib/romeo/xmlns.ex	/^  def ns_browse,$/;"	f
ns_bytestreams	lib/romeo/xmlns.ex	/^  def ns_bytestreams,$/;"	f
ns_caps	lib/romeo/xmlns.ex	/^  def ns_caps,$/;"	f
ns_captcha	lib/romeo/xmlns.ex	/^  def ns_captcha,$/;"	f
ns_chatstates	lib/romeo/xmlns.ex	/^  def ns_chatstates,$/;"	f
ns_component_accept	lib/romeo/xmlns.ex	/^  def ns_component_accept,$/;"	f
ns_component_connect	lib/romeo/xmlns.ex	/^  def ns_component_connect,$/;"	f
ns_component_connection	lib/romeo/xmlns.ex	/^  def ns_component_connection,$/;"	f
ns_component_connection_0	lib/romeo/xmlns.ex	/^  def ns_component_connection_0,$/;"	f
ns_compress	lib/romeo/xmlns.ex	/^  def ns_compress,$/;"	f
ns_compress_feat	lib/romeo/xmlns.ex	/^  def ns_compress_feat,$/;"	f
ns_data	lib/romeo/xmlns.ex	/^  def ns_data,$/;"	f
ns_data_forms	lib/romeo/xmlns.ex	/^  def ns_data_forms,$/;"	f
ns_data_forms_layout	lib/romeo/xmlns.ex	/^  def ns_data_forms_layout,$/;"	f
ns_data_forms_media	lib/romeo/xmlns.ex	/^  def ns_data_forms_media,$/;"	f
ns_data_forms_media_tmp	lib/romeo/xmlns.ex	/^  def ns_data_forms_media_tmp,$/;"	f
ns_data_forms_validate	lib/romeo/xmlns.ex	/^  def ns_data_forms_validate,$/;"	f
ns_delay	lib/romeo/xmlns.ex	/^  def ns_delay,$/;"	f
ns_delay_old	lib/romeo/xmlns.ex	/^  def ns_delay_old,$/;"	f
ns_dialback	lib/romeo/xmlns.ex	/^  def ns_dialback,$/;"	f
ns_dialback_feat	lib/romeo/xmlns.ex	/^  def ns_dialback_feat,$/;"	f
ns_disco_info	lib/romeo/xmlns.ex	/^  def ns_disco_info,$/;"	f
ns_disco_items	lib/romeo/xmlns.ex	/^  def ns_disco_items,$/;"	f
ns_domain_based_name	lib/romeo/xmlns.ex	/^  def ns_domain_based_name,$/;"	f
ns_domain_based_name_b	lib/romeo/xmlns.ex	/^  def ns_domain_based_name_b,$/;"	f
ns_e2e	lib/romeo/xmlns.ex	/^  def ns_e2e,$/;"	f
ns_external_disco	lib/romeo/xmlns.ex	/^  def ns_external_disco,$/;"	f
ns_external_disco_0	lib/romeo/xmlns.ex	/^  def ns_external_disco_0,$/;"	f
ns_feature_neg	lib/romeo/xmlns.ex	/^  def ns_feature_neg,$/;"	f
ns_file_transfert	lib/romeo/xmlns.ex	/^  def ns_file_transfert,$/;"	f
ns_ft_thumbs_0	lib/romeo/xmlns.ex	/^  def ns_ft_thumbs_0,$/;"	f
ns_gateway	lib/romeo/xmlns.ex	/^  def ns_gateway,$/;"	f
ns_geoloc	lib/romeo/xmlns.ex	/^  def ns_geoloc,$/;"	f
ns_http_auth	lib/romeo/xmlns.ex	/^  def ns_http_auth,$/;"	f
ns_http_bind	lib/romeo/xmlns.ex	/^  def ns_http_bind,$/;"	f
ns_ibb	lib/romeo/xmlns.ex	/^  def ns_ibb,$/;"	f
ns_inband_register	lib/romeo/xmlns.ex	/^  def ns_inband_register,$/;"	f
ns_inband_register_feat	lib/romeo/xmlns.ex	/^  def ns_inband_register_feat,$/;"	f
ns_incident_report_0	lib/romeo/xmlns.ex	/^  def ns_incident_report_0,$/;"	f
ns_invisible_command	lib/romeo/xmlns.ex	/^  def ns_invisible_command,$/;"	f
ns_invisible_command_0	lib/romeo/xmlns.ex	/^  def ns_invisible_command_0,$/;"	f
ns_io_data_tmp	lib/romeo/xmlns.ex	/^  def ns_io_data_tmp,$/;"	f
ns_jabber_client	lib/romeo/xmlns.ex	/^  def ns_jabber_client,$/;"	f
ns_jabber_server	lib/romeo/xmlns.ex	/^  def ns_jabber_server,$/;"	f
ns_jabber_x_conf	lib/romeo/xmlns.ex	/^  def ns_jabber_x_conf,$/;"	f
ns_jingle	lib/romeo/xmlns.ex	/^  def ns_jingle,$/;"	f
ns_jingle_apps_oob_0	lib/romeo/xmlns.ex	/^  def ns_jingle_apps_oob_0,$/;"	f
ns_jingle_apps_rtp_zrtp_0	lib/romeo/xmlns.ex	/^  def ns_jingle_apps_rtp_zrtp_0,$/;"	f
ns_jingle_bootstraping	lib/romeo/xmlns.ex	/^  def ns_jingle_bootstraping,$/;"	f
ns_jingle_dtmf	lib/romeo/xmlns.ex	/^  def ns_jingle_dtmf,$/;"	f
ns_jingle_dtmf_0	lib/romeo/xmlns.ex	/^  def ns_jingle_dtmf_0,$/;"	f
ns_jingle_errors	lib/romeo/xmlns.ex	/^  def ns_jingle_errors,$/;"	f
ns_jingle_file_transfert	lib/romeo/xmlns.ex	/^  def ns_jingle_file_transfert,$/;"	f
ns_jingle_ft_1	lib/romeo/xmlns.ex	/^  def ns_jingle_ft_1,$/;"	f
ns_jingle_ice_udp	lib/romeo/xmlns.ex	/^  def ns_jingle_ice_udp,$/;"	f
ns_jingle_raw_udp	lib/romeo/xmlns.ex	/^  def ns_jingle_raw_udp,$/;"	f
ns_jingle_raw_udp_info	lib/romeo/xmlns.ex	/^  def ns_jingle_raw_udp_info,$/;"	f
ns_jingle_relay_nodes	lib/romeo/xmlns.ex	/^  def ns_jingle_relay_nodes,$/;"	f
ns_jingle_rpt	lib/romeo/xmlns.ex	/^  def ns_jingle_rpt,$/;"	f
ns_jingle_rpt_info	lib/romeo/xmlns.ex	/^  def ns_jingle_rpt_info,$/;"	f
ns_jingle_transfer_0	lib/romeo/xmlns.ex	/^  def ns_jingle_transfer_0,$/;"	f
ns_jingle_transports_s5b_0	lib/romeo/xmlns.ex	/^  def ns_jingle_transports_s5b_0,$/;"	f
ns_jingle_transports_s5b_1	lib/romeo/xmlns.ex	/^  def ns_jingle_transports_s5b_1,$/;"	f
ns_jingle_xml_stream	lib/romeo/xmlns.ex	/^  def ns_jingle_xml_stream,$/;"	f
ns_jingle_xml_stream_0	lib/romeo/xmlns.ex	/^  def ns_jingle_xml_stream_0,$/;"	f
ns_lang_trans	lib/romeo/xmlns.ex	/^  def ns_lang_trans,$/;"	f
ns_lang_trans_items	lib/romeo/xmlns.ex	/^  def ns_lang_trans_items,$/;"	f
ns_last_activity	lib/romeo/xmlns.ex	/^  def ns_last_activity,$/;"	f
ns_legacy_auth	lib/romeo/xmlns.ex	/^  def ns_legacy_auth,$/;"	f
ns_legacy_auth_feat	lib/romeo/xmlns.ex	/^  def ns_legacy_auth_feat,$/;"	f
ns_location_query_0	lib/romeo/xmlns.ex	/^  def ns_location_query_0,$/;"	f
ns_message_event	lib/romeo/xmlns.ex	/^  def ns_message_event,$/;"	f
ns_message_expire	lib/romeo/xmlns.ex	/^  def ns_message_expire,$/;"	f
ns_metacontacts	lib/romeo/xmlns.ex	/^  def ns_metacontacts,$/;"	f
ns_mine_tmp_0	lib/romeo/xmlns.ex	/^  def ns_mine_tmp_0,$/;"	f
ns_msgoffline	lib/romeo/xmlns.ex	/^  def ns_msgoffline,$/;"	f
ns_mublog_0	lib/romeo/xmlns.ex	/^  def ns_mublog_0,$/;"	f
ns_muc	lib/romeo/xmlns.ex	/^  def ns_muc,$/;"	f
ns_muc_admin	lib/romeo/xmlns.ex	/^  def ns_muc_admin,$/;"	f
ns_muc_owner	lib/romeo/xmlns.ex	/^  def ns_muc_owner,$/;"	f
ns_muc_unique	lib/romeo/xmlns.ex	/^  def ns_muc_unique,$/;"	f
ns_muc_user	lib/romeo/xmlns.ex	/^  def ns_muc_user,$/;"	f
ns_oauth_0	lib/romeo/xmlns.ex	/^  def ns_oauth_0,$/;"	f
ns_oauth_errors_0	lib/romeo/xmlns.ex	/^  def ns_oauth_errors_0,$/;"	f
ns_offline	lib/romeo/xmlns.ex	/^  def ns_offline,$/;"	f
ns_oobd_iq	lib/romeo/xmlns.ex	/^  def ns_oobd_iq,$/;"	f
ns_oobd_x	lib/romeo/xmlns.ex	/^  def ns_oobd_x,$/;"	f
ns_pass	lib/romeo/xmlns.ex	/^  def ns_pass,$/;"	f
ns_pgp_encrypted	lib/romeo/xmlns.ex	/^  def ns_pgp_encrypted,$/;"	f
ns_pgp_signed	lib/romeo/xmlns.ex	/^  def ns_pgp_signed,$/;"	f
ns_ping	lib/romeo/xmlns.ex	/^  def ns_ping,$/;"	f
ns_privacy	lib/romeo/xmlns.ex	/^  def ns_privacy,$/;"	f
ns_private	lib/romeo/xmlns.ex	/^  def ns_private,$/;"	f
ns_pubkey_1	lib/romeo/xmlns.ex	/^  def ns_pubkey_1,$/;"	f
ns_pubkey_tmp	lib/romeo/xmlns.ex	/^  def ns_pubkey_tmp,$/;"	f
ns_pubsub	lib/romeo/xmlns.ex	/^  def ns_pubsub,$/;"	f
ns_pubsub_access_auth	lib/romeo/xmlns.ex	/^  def ns_pubsub_access_auth,$/;"	f
ns_pubsub_access_open	lib/romeo/xmlns.ex	/^  def ns_pubsub_access_open,$/;"	f
ns_pubsub_access_presence	lib/romeo/xmlns.ex	/^  def ns_pubsub_access_presence,$/;"	f
ns_pubsub_access_roster	lib/romeo/xmlns.ex	/^  def ns_pubsub_access_roster,$/;"	f
ns_pubsub_access_whitelist	lib/romeo/xmlns.ex	/^  def ns_pubsub_access_whitelist,$/;"	f
ns_pubsub_auto_create	lib/romeo/xmlns.ex	/^  def ns_pubsub_auto_create,$/;"	f
ns_pubsub_auto_subscribe	lib/romeo/xmlns.ex	/^  def ns_pubsub_auto_subscribe,$/;"	f
ns_pubsub_chaining	lib/romeo/xmlns.ex	/^  def ns_pubsub_chaining,$/;"	f
ns_pubsub_collections	lib/romeo/xmlns.ex	/^  def ns_pubsub_collections,$/;"	f
ns_pubsub_config_node	lib/romeo/xmlns.ex	/^  def ns_pubsub_config_node,$/;"	f
ns_pubsub_create_configure	lib/romeo/xmlns.ex	/^  def ns_pubsub_create_configure,$/;"	f
ns_pubsub_create_nodes	lib/romeo/xmlns.ex	/^  def ns_pubsub_create_nodes,$/;"	f
ns_pubsub_delete_items	lib/romeo/xmlns.ex	/^  def ns_pubsub_delete_items,$/;"	f
ns_pubsub_delete_nodes	lib/romeo/xmlns.ex	/^  def ns_pubsub_delete_nodes,$/;"	f
ns_pubsub_errors	lib/romeo/xmlns.ex	/^  def ns_pubsub_errors,$/;"	f
ns_pubsub_event	lib/romeo/xmlns.ex	/^  def ns_pubsub_event,$/;"	f
ns_pubsub_filtered_notifications	lib/romeo/xmlns.ex	/^  def ns_pubsub_filtered_notifications,$/;"	f
ns_pubsub_get_pending	lib/romeo/xmlns.ex	/^  def ns_pubsub_get_pending,$/;"	f
ns_pubsub_instant_nodes	lib/romeo/xmlns.ex	/^  def ns_pubsub_instant_nodes,$/;"	f
ns_pubsub_item_ids	lib/romeo/xmlns.ex	/^  def ns_pubsub_item_ids,$/;"	f
ns_pubsub_last_published	lib/romeo/xmlns.ex	/^  def ns_pubsub_last_published,$/;"	f
ns_pubsub_leased_subscription	lib/romeo/xmlns.ex	/^  def ns_pubsub_leased_subscription,$/;"	f
ns_pubsub_manage_subscriptions	lib/romeo/xmlns.ex	/^  def ns_pubsub_manage_subscriptions,$/;"	f
ns_pubsub_member_affiliation	lib/romeo/xmlns.ex	/^  def ns_pubsub_member_affiliation,$/;"	f
ns_pubsub_meta_data	lib/romeo/xmlns.ex	/^  def ns_pubsub_meta_data,$/;"	f
ns_pubsub_modify_affiliations	lib/romeo/xmlns.ex	/^  def ns_pubsub_modify_affiliations,$/;"	f
ns_pubsub_multi_collection	lib/romeo/xmlns.ex	/^  def ns_pubsub_multi_collection,$/;"	f
ns_pubsub_multi_subscribe	lib/romeo/xmlns.ex	/^  def ns_pubsub_multi_subscribe,$/;"	f
ns_pubsub_node_config	lib/romeo/xmlns.ex	/^  def ns_pubsub_node_config,$/;"	f
ns_pubsub_outcast_affiliation	lib/romeo/xmlns.ex	/^  def ns_pubsub_outcast_affiliation,$/;"	f
ns_pubsub_owner	lib/romeo/xmlns.ex	/^  def ns_pubsub_owner,$/;"	f
ns_pubsub_persistent_items	lib/romeo/xmlns.ex	/^  def ns_pubsub_persistent_items,$/;"	f
ns_pubsub_presence_notifications	lib/romeo/xmlns.ex	/^  def ns_pubsub_presence_notifications,$/;"	f
ns_pubsub_presence_subscribe	lib/romeo/xmlns.ex	/^  def ns_pubsub_presence_subscribe,$/;"	f
ns_pubsub_publish	lib/romeo/xmlns.ex	/^  def ns_pubsub_publish,$/;"	f
ns_pubsub_publish_only_affiliation	lib/romeo/xmlns.ex	/^  def ns_pubsub_publish_only_affiliation,$/;"	f
ns_pubsub_publish_options	lib/romeo/xmlns.ex	/^  def ns_pubsub_publish_options,$/;"	f
ns_pubsub_publisher_affiliation	lib/romeo/xmlns.ex	/^  def ns_pubsub_publisher_affiliation,$/;"	f
ns_pubsub_purge_nodes	lib/romeo/xmlns.ex	/^  def ns_pubsub_purge_nodes,$/;"	f
ns_pubsub_queueing_0	lib/romeo/xmlns.ex	/^  def ns_pubsub_queueing_0,$/;"	f
ns_pubsub_retract_items	lib/romeo/xmlns.ex	/^  def ns_pubsub_retract_items,$/;"	f
ns_pubsub_retrieve_affiliations	lib/romeo/xmlns.ex	/^  def ns_pubsub_retrieve_affiliations,$/;"	f
ns_pubsub_retrieve_default	lib/romeo/xmlns.ex	/^  def ns_pubsub_retrieve_default,$/;"	f
ns_pubsub_retrieve_items	lib/romeo/xmlns.ex	/^  def ns_pubsub_retrieve_items,$/;"	f
ns_pubsub_retrieve_subscriptions	lib/romeo/xmlns.ex	/^  def ns_pubsub_retrieve_subscriptions,$/;"	f
ns_pubsub_subscribe	lib/romeo/xmlns.ex	/^  def ns_pubsub_subscribe,$/;"	f
ns_pubsub_subscribe_auth	lib/romeo/xmlns.ex	/^  def ns_pubsub_subscribe_auth,$/;"	f
ns_pubsub_subscribe_options	lib/romeo/xmlns.ex	/^  def ns_pubsub_subscribe_options,$/;"	f
ns_pubsub_subscription_notifications	lib/romeo/xmlns.ex	/^  def ns_pubsub_subscription_notifications,$/;"	f
ns_pubsub_subscription_options	lib/romeo/xmlns.ex	/^  def ns_pubsub_subscription_options,$/;"	f
ns_rap	lib/romeo/xmlns.ex	/^  def ns_rap,$/;"	f
ns_rap_route	lib/romeo/xmlns.ex	/^  def ns_rap_route,$/;"	f
ns_receipts	lib/romeo/xmlns.ex	/^  def ns_receipts,$/;"	f
ns_reputation_0	lib/romeo/xmlns.ex	/^  def ns_reputation_0,$/;"	f
ns_revoke_1	lib/romeo/xmlns.ex	/^  def ns_revoke_1,$/;"	f
ns_robot_challenge	lib/romeo/xmlns.ex	/^  def ns_robot_challenge,$/;"	f
ns_roster	lib/romeo/xmlns.ex	/^  def ns_roster,$/;"	f
ns_roster_delimiter	lib/romeo/xmlns.ex	/^  def ns_roster_delimiter,$/;"	f
ns_roster_exchange	lib/romeo/xmlns.ex	/^  def ns_roster_exchange,$/;"	f
ns_roster_exchange_old	lib/romeo/xmlns.ex	/^  def ns_roster_exchange_old,$/;"	f
ns_roster_notes	lib/romeo/xmlns.ex	/^  def ns_roster_notes,$/;"	f
ns_roster_seq	lib/romeo/xmlns.ex	/^  def ns_roster_seq,$/;"	f
ns_roster_ver	lib/romeo/xmlns.ex	/^  def ns_roster_ver,$/;"	f
ns_rpc	lib/romeo/xmlns.ex	/^  def ns_rpc,$/;"	f
ns_rsm	lib/romeo/xmlns.ex	/^  def ns_rsm,$/;"	f
ns_sasl	lib/romeo/xmlns.ex	/^  def ns_sasl,$/;"	f
ns_sasl_cert_0	lib/romeo/xmlns.ex	/^  def ns_sasl_cert_0,$/;"	f
ns_search	lib/romeo/xmlns.ex	/^  def ns_search,$/;"	f
ns_sec_label_0	lib/romeo/xmlns.ex	/^  def ns_sec_label_0,$/;"	f
ns_sec_label_catalog_1	lib/romeo/xmlns.ex	/^  def ns_sec_label_catalog_1,$/;"	f
ns_sec_label_ess_0	lib/romeo/xmlns.ex	/^  def ns_sec_label_ess_0,$/;"	f
ns_server_import_export	lib/romeo/xmlns.ex	/^  def ns_server_import_export,$/;"	f
ns_serverinfo	lib/romeo/xmlns.ex	/^  def ns_serverinfo,$/;"	f
ns_session	lib/romeo/xmlns.ex	/^  def ns_session,$/;"	f
ns_shim	lib/romeo/xmlns.ex	/^  def ns_shim,$/;"	f
ns_si	lib/romeo/xmlns.ex	/^  def ns_si,$/;"	f
ns_si_pub	lib/romeo/xmlns.ex	/^  def ns_si_pub,$/;"	f
ns_sic_0	lib/romeo/xmlns.ex	/^  def ns_sic_0,$/;"	f
ns_sift_1	lib/romeo/xmlns.ex	/^  def ns_sift_1,$/;"	f
ns_soap_fault	lib/romeo/xmlns.ex	/^  def ns_soap_fault,$/;"	f
ns_soft_version	lib/romeo/xmlns.ex	/^  def ns_soft_version,$/;"	f
ns_ssn	lib/romeo/xmlns.ex	/^  def ns_ssn,$/;"	f
ns_stanza_ack	lib/romeo/xmlns.ex	/^  def ns_stanza_ack,$/;"	f
ns_stanza_errors	lib/romeo/xmlns.ex	/^  def ns_stanza_errors,$/;"	f
ns_stats	lib/romeo/xmlns.ex	/^  def ns_stats,$/;"	f
ns_stream_errors	lib/romeo/xmlns.ex	/^  def ns_stream_errors,$/;"	f
ns_stream_mgnt_0	lib/romeo/xmlns.ex	/^  def ns_stream_mgnt_0,$/;"	f
ns_stream_mgnt_1	lib/romeo/xmlns.ex	/^  def ns_stream_mgnt_1,$/;"	f
ns_stream_mgnt_2	lib/romeo/xmlns.ex	/^  def ns_stream_mgnt_2,$/;"	f
ns_stream_mgnt_3	lib/romeo/xmlns.ex	/^  def ns_stream_mgnt_3,$/;"	f
ns_telepathy_muji	lib/romeo/xmlns.ex	/^  def ns_telepathy_muji,$/;"	f
ns_temppres_0	lib/romeo/xmlns.ex	/^  def ns_temppres_0,$/;"	f
ns_time	lib/romeo/xmlns.ex	/^  def ns_time,$/;"	f
ns_time_old	lib/romeo/xmlns.ex	/^  def ns_time_old,$/;"	f
ns_tls	lib/romeo/xmlns.ex	/^  def ns_tls,$/;"	f
ns_user_activity	lib/romeo/xmlns.ex	/^  def ns_user_activity,$/;"	f
ns_user_avatar_data	lib/romeo/xmlns.ex	/^  def ns_user_avatar_data,$/;"	f
ns_user_avatar_metadata	lib/romeo/xmlns.ex	/^  def ns_user_avatar_metadata,$/;"	f
ns_user_browsing	lib/romeo/xmlns.ex	/^  def ns_user_browsing,$/;"	f
ns_user_browsing_0	lib/romeo/xmlns.ex	/^  def ns_user_browsing_0,$/;"	f
ns_user_chatting	lib/romeo/xmlns.ex	/^  def ns_user_chatting,$/;"	f
ns_user_chatting_0	lib/romeo/xmlns.ex	/^  def ns_user_chatting_0,$/;"	f
ns_user_gaming	lib/romeo/xmlns.ex	/^  def ns_user_gaming,$/;"	f
ns_user_gaming_0	lib/romeo/xmlns.ex	/^  def ns_user_gaming_0,$/;"	f
ns_user_mood	lib/romeo/xmlns.ex	/^  def ns_user_mood,$/;"	f
ns_user_nickname	lib/romeo/xmlns.ex	/^  def ns_user_nickname,$/;"	f
ns_user_physloc	lib/romeo/xmlns.ex	/^  def ns_user_physloc,$/;"	f
ns_user_profile	lib/romeo/xmlns.ex	/^  def ns_user_profile,$/;"	f
ns_user_tune	lib/romeo/xmlns.ex	/^  def ns_user_tune,$/;"	f
ns_user_viewing	lib/romeo/xmlns.ex	/^  def ns_user_viewing,$/;"	f
ns_user_viewing_0	lib/romeo/xmlns.ex	/^  def ns_user_viewing_0,$/;"	f
ns_vcard	lib/romeo/xmlns.ex	/^  def ns_vcard,$/;"	f
ns_vcard_update	lib/romeo/xmlns.ex	/^  def ns_vcard_update,$/;"	f
ns_waiting_list	lib/romeo/xmlns.ex	/^  def ns_waiting_list,$/;"	f
ns_xbosh	lib/romeo/xmlns.ex	/^  def ns_xbosh,$/;"	f
ns_xhtml	lib/romeo/xmlns.ex	/^  def ns_xhtml,$/;"	f
ns_xhtml_im	lib/romeo/xmlns.ex	/^  def ns_xhtml_im,$/;"	f
ns_xml	lib/romeo/xmlns.ex	/^  def ns_xml,$/;"	f
ns_xmpp	lib/romeo/xmlns.ex	/^  def ns_xmpp,$/;"	f
package	mix.exs	/^  defp package do$/;"	f
parse	lib/romeo/jid.ex	/^  def parse(string) do$/;"	f
parse	lib/romeo/stanza/parser.ex	/^  def parse(stanza), do: stanza$/;"	f
parse	lib/romeo/stanza/parser.ex	/^  def parse(xmlcdata(content: content)), do: content$/;"	f
parse	lib/romeo/stanza/parser.ex	/^  def parse(xmlel(name: "iq", attrs: attrs) = stanza) do$/;"	f
parse	lib/romeo/stanza/parser.ex	/^  def parse(xmlel(name: "item", attrs: attrs) = stanza) do$/;"	f
parse	lib/romeo/stanza/parser.ex	/^  def parse(xmlel(name: "message", attrs: attrs) = stanza) do$/;"	f
parse	lib/romeo/stanza/parser.ex	/^  def parse(xmlel(name: "presence", attrs: attrs) = stanza) do$/;"	f
parse	lib/romeo/stanza/parser.ex	/^  def parse(xmlel(name: "query") = stanza) do$/;"	f
parse	lib/romeo/stanza/parser.ex	/^  def parse(xmlel(name: name, attrs: attrs) = stanza) do$/;"	f
parse_attr	lib/romeo/stanza/parser.ex	/^  defp parse_attr({key, value}) do$/;"	f
parse_attr	lib/romeo/stanza/parser.ex	/^  defp parse_attr({key, value}) when key in ["to", "from", "jid"] do$/;"	f
parse_attrs	lib/romeo/stanza/parser.ex	/^  defp parse_attrs([]), do: []$/;"	f
parse_attrs	lib/romeo/stanza/parser.ex	/^  defp parse_attrs([], acc), do: acc$/;"	f
parse_attrs	lib/romeo/stanza/parser.ex	/^  defp parse_attrs([{k,v}|rest], acc) do$/;"	f
parse_attrs	lib/romeo/stanza/parser.ex	/^  defp parse_attrs(attrs) do$/;"	f
parse_data	lib/romeo/transports/tcp.ex	/^  defp parse_data(%Conn{jid: jid, parser: parser} = conn, data) do$/;"	f
parse_stream_features	lib/romeo/connection/features.ex	/^  def parse_stream_features(features) do$/;"	f
preferred_mechanism	lib/romeo/auth.ex	/^  defp preferred_mechanism([], _), do: "PLAIN"$/;"	f
preferred_mechanism	lib/romeo/auth.ex	/^  defp preferred_mechanism([mechanism | tail], mechanisms) do$/;"	f
presence	lib/romeo/stanza.ex	/^  def presence do$/;"	f
presence	lib/romeo/stanza.ex	/^  def presence(to, type) do$/;"	f
presence	lib/romeo/stanza.ex	/^  def presence(type) do$/;"	f
presence	test/romeo/stanza_test.exs	/^  test "presence" do$/;"	t
presence	test/romeo/stanza_test.exs	/^  test "presence\/1" do$/;"	t
presence	test/romeo/stanza_test.exs	/^  test "presence\/2" do$/;"	t
project	mix.exs	/^  def project do$/;"	f
ready	lib/romeo/transports/tcp.ex	/^  defp ready(%Conn{owner: owner} = conn) do$/;"	f
receive_stanza	lib/romeo/transports/tcp.ex	/^  defp receive_stanza(timeout \\\\ 10) do$/;"	f
recv	lib/romeo/transports/tcp.ex	/^  def recv(%Conn{socket: {:gen_tcp, socket}, timeout: timeout} = conn, fun) do$/;"	f
recv	lib/romeo/transports/tcp.ex	/^  def recv(%Conn{socket: {:ssl, socket}, timeout: timeout} = conn, fun) do$/;"	f
recv	lib/romeo/transports/tcp.ex	/^  def recv({:ok, conn}, fun), do: recv(conn, fun)$/;"	f
register_user	test/user_helper.exs	/^  def register_user(username, password \\\\ "password") do$/;"	f
remove	lib/romeo/roster.ex	/^  def remove(pid, jid) do$/;"	f
reset_connection	lib/romeo/connection.ex	/^  defp reset_connection(conn) do$/;"	f
reset_parser	lib/romeo/transports/tcp.ex	/^  defp reset_parser(%Conn{parser: parser} = conn) do$/;"	f
resource	lib/romeo/jid.ex	/^  def resource(%JID{resource: resource}), do: resource$/;"	f
resource	lib/romeo/jid.ex	/^  def resource(jid) when is_binary(jid), do: parse(jid).resource$/;"	f
resource conflict	test/romeo/connection_test.exs	/^  test "resource conflict", %{romeo: romeo} do$/;"	t
run	lib/mix/tasks/ejabberd.gen.config.ex	/^  def run([]) do$/;"	f
send	lib/romeo/connection.ex	/^  def send(pid, data) do$/;"	f
send	lib/romeo/transports/tcp.ex	/^  def send(%Conn{jid: jid, socket: {mod, socket}} = conn, stanza) do$/;"	f
send_stanza	lib/romeo/roster.ex	/^  defp send_stanza(pid, stanza) do$/;"	f
sending presence	test/romeo/connection_test.exs	/^  test "sending presence", %{romeo: romeo} do$/;"	t
server	lib/romeo/jid.ex	/^  def server(%JID{server: server}), do: server$/;"	f
server	lib/romeo/jid.ex	/^  def server(jid) when is_binary(jid), do: parse(jid).server$/;"	f
session	lib/romeo/stanza.ex	/^  def session do$/;"	f
session	lib/romeo/transports/tcp.ex	/^  defp session(%Conn{} = conn) do$/;"	f
session	test/romeo/stanza_test.exs	/^  test "session" do$/;"	t
set_inband_register	lib/romeo/stanza.ex	/^  def set_inband_register(username, password) do$/;"	f
set_inband_register	test/romeo/stanza_test.exs	/^  test "set_inband_register" do$/;"	t
set_roster_item	lib/romeo/stanza.ex	/^  def set_roster_item(jid, subscription \\\\ "both", name \\\\ "", group \\\\ "") do$/;"	f
set_roster_item	test/romeo/stanza_test.exs	/^  test "set_roster_item" do$/;"	t
setup_presence_subscriptions	test/user_helper.exs	/^  def setup_presence_subscriptions(user1, user2) do$/;"	f
start	lib/romeo.ex	/^  def start(_type, _args) do$/;"	f
start_link	lib/romeo/connection.ex	/^  def start_link(args, options \\\\ []) do$/;"	f
start_protocol	lib/romeo/transports/tcp.ex	/^  defp start_protocol(%Conn{component: true} = conn) do$/;"	f
start_protocol	lib/romeo/transports/tcp.ex	/^  defp start_protocol(%Conn{} = conn) do$/;"	f
start_stream	lib/romeo/stanza.ex	/^  def start_stream(server, xmlns \\\\ ns_jabber_client()) do$/;"	f
start_stream	lib/romeo/transports/tcp.ex	/^  defp start_stream(%Conn{jid: jid} = conn, xmlns \\\\ @ns_jabber_client) do$/;"	f
start_stream with	test/romeo/stanza_test.exs	/^  test "start_stream with 'jabber:server' xmlns" do$/;"	t
start_stream with default xmlns	test/romeo/stanza_test.exs	/^  test "start_stream with default xmlns" do$/;"	t
start_tls	lib/romeo/stanza.ex	/^  def start_tls do$/;"	f
start_tls	test/romeo/stanza_test.exs	/^  test "start_tls" do$/;"	t
subelement	lib/romeo/xml.ex	/^  def subelement(element, name, default \\\\ nil) do$/;"	f
subelement	test/romeo/xml_test.exs	/^  test "subelement" do$/;"	t
subelements	lib/romeo/xml.ex	/^  def subelements(element, name) do$/;"	f
subscribe	lib/romeo/stanza.ex	/^  def subscribe(to, node, jid) do$/;"	f
subscribe	test/romeo/stanza_test.exs	/^  test "subscribe" do$/;"	t
success?	lib/romeo/auth.ex	/^  defp success?(%{transport: mod} = conn) do$/;"	f
supported_auth_mechanisms	lib/romeo/connection/features.ex	/^  def supported_auth_mechanisms(features) do$/;"	f
supports?	lib/romeo/connection/features.ex	/^  def supports?(features, "compression") do$/;"	f
supports?	lib/romeo/connection/features.ex	/^  def supports?(features, feature) do$/;"	f
the truth	test/romeo_test.exs	/^  test "the truth" do$/;"	t
to_string	lib/romeo/jid.ex	/^    def to_string(%JID{user: "", server: server, resource: ""}), do: server$/;"	f
to_string	lib/romeo/jid.ex	/^    def to_string(%JID{user: user, server: server, resource: ""}) do$/;"	f
to_string	lib/romeo/jid.ex	/^    def to_string(%JID{user: user, server: server, resource: resource}) do$/;"	f
to_xml	lib/romeo/stanza.ex	/^  def to_xml(%IQ{} = stanza) do$/;"	f
to_xml	lib/romeo/stanza.ex	/^  def to_xml(%Message{to: to, type: type, body: body}) do$/;"	f
to_xml	lib/romeo/stanza.ex	/^  def to_xml(%Presence{} = stanza) do$/;"	f
to_xml	lib/romeo/stanza.ex	/^  def to_xml(record) when Record.is_record(record) do$/;"	f
to_xml for IQ struct	test/romeo/stanza_test.exs	/^  test "to_xml for IQ struct" do$/;"	t
to_xml for Presence struct	test/romeo/stanza_test.exs	/^  test "to_xml for Presence struct" do$/;"	t
translate_connection_step	lib/romeo/error.ex	/^  defp translate_connection_step(atom) do$/;"	f
translate_message	lib/romeo/error.ex	/^  defp translate_message(message), do: inspect(message)$/;"	f
translate_message	lib/romeo/error.ex	/^  defp translate_message({:timeout, ms, connection_step}) do$/;"	f
unregister_user	test/user_helper.exs	/^  def unregister_user(username) do$/;"	f
upgrade_to_tls	lib/romeo/transports/tcp.ex	/^  defp upgrade_to_tls(%Conn{parser: parser, socket: {:gen_tcp, socket}} = conn) do$/;"	f
user	lib/romeo/jid.ex	/^  def user(%JID{user: user}), do: user$/;"	f
user	lib/romeo/jid.ex	/^  def user(jid) when is_binary(jid), do: parse(jid).user$/;"	f
v0.1.0	CHANGELOG.md	/^## v0.1.0$/;"	s
v0.2.0	CHANGELOG.md	/^## v0.2.0$/;"	s
v0.3.0	CHANGELOG.md	/^## v0.3.0$/;"	s
v0.4.0	CHANGELOG.md	/^## v0.4.0$/;"	s
whitespace_only?	lib/romeo/transports/tcp.ex	/^  defp whitespace_only?(data), do: Regex.match?(~r\/^\\s+$\/, data)$/;"	f
xhtml im	test/romeo/stanza_test.exs	/^  test "xhtml im" do$/;"	t
xhtml_im	lib/romeo/stanza.ex	/^  def xhtml_im(data) do$/;"	f
xhtml_im	lib/romeo/stanza.ex	/^  def xhtml_im(data) when is_binary(data) do$/;"	f
